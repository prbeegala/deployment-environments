{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.24.24.22086",
      "templateHash": "10682377199593983824"
    }
  },
  "parameters": {
    "environmentName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 64,
      "metadata": {
        "description": "Name of the the environment which is used to generate a short unique hash used in all resources."
      }
    },
    "location": {
      "type": "string",
      "defaultValue":"[resourceGroup().location]",
      "minLength": 1,
      "metadata": {
        "description": "Primary location for all resources"
      }
    },
    "resourceGroupName": {
      "type": "string",
      "defaultValue": ""
    },
    "webServiceName": {
      "type": "string",
      "defaultValue": ""
    },
    "catalogDatabaseName": {
      "type": "string",
      "defaultValue": "catalogDatabase"
    },
    "catalogDatabaseServerName": {
      "type": "string",
      "defaultValue": ""
    },
    "identityDatabaseName": {
      "type": "string",
      "defaultValue": "identityDatabase"
    },
    "identityDatabaseServerName": {
      "type": "string",
      "defaultValue": ""
    },
    "appServicePlanName": {
      "type": "string",
      "defaultValue": ""
    },
    "keyVaultName": {
      "type": "string",
      "defaultValue": ""
    },
    "principalId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Id of the user or app to assign application roles"
      }
    },
    "sqlAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "SQL Server administrator password"
      }
    },
    "appUserPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Application user password"
      }
    }
  },
  "variables": {
    "$fxv#0": {
      "analysisServicesServers": "as",
      "apiManagementService": "apim-",
      "appConfigurationConfigurationStores": "appcs-",
      "appManagedEnvironments": "cae-",
      "appContainerApps": "ca-",
      "authorizationPolicyDefinitions": "policy-",
      "automationAutomationAccounts": "aa-",
      "blueprintBlueprints": "bp-",
      "blueprintBlueprintsArtifacts": "bpa-",
      "cacheRedis": "redis-",
      "cdnProfiles": "cdnp-",
      "cdnProfilesEndpoints": "cdne-",
      "cognitiveServicesAccounts": "cog-",
      "cognitiveServicesFormRecognizer": "cog-fr-",
      "cognitiveServicesTextAnalytics": "cog-ta-",
      "computeAvailabilitySets": "avail-",
      "computeCloudServices": "cld-",
      "computeDiskEncryptionSets": "des",
      "computeDisks": "disk",
      "computeDisksOs": "osdisk",
      "computeGalleries": "gal",
      "computeSnapshots": "snap-",
      "computeVirtualMachines": "vm",
      "computeVirtualMachineScaleSets": "vmss-",
      "containerInstanceContainerGroups": "ci",
      "containerRegistryRegistries": "cr",
      "containerServiceManagedClusters": "aks-",
      "databricksWorkspaces": "dbw-",
      "dataFactoryFactories": "adf-",
      "dataLakeAnalyticsAccounts": "dla",
      "dataLakeStoreAccounts": "dls",
      "dataMigrationServices": "dms-",
      "dBforMySQLServers": "mysql-",
      "dBforPostgreSQLServers": "psql-",
      "devicesIotHubs": "iot-",
      "devicesProvisioningServices": "provs-",
      "devicesProvisioningServicesCertificates": "pcert-",
      "documentDBDatabaseAccounts": "cosmos-",
      "eventGridDomains": "evgd-",
      "eventGridDomainsTopics": "evgt-",
      "eventGridEventSubscriptions": "evgs-",
      "eventHubNamespaces": "evhns-",
      "eventHubNamespacesEventHubs": "evh-",
      "hdInsightClustersHadoop": "hadoop-",
      "hdInsightClustersHbase": "hbase-",
      "hdInsightClustersKafka": "kafka-",
      "hdInsightClustersMl": "mls-",
      "hdInsightClustersSpark": "spark-",
      "hdInsightClustersStorm": "storm-",
      "hybridComputeMachines": "arcs-",
      "insightsActionGroups": "ag-",
      "insightsComponents": "appi-",
      "keyVaultVaults": "kv-",
      "kubernetesConnectedClusters": "arck",
      "kustoClusters": "dec",
      "kustoClustersDatabases": "dedb",
      "logicIntegrationAccounts": "ia-",
      "logicWorkflows": "logic-",
      "machineLearningServicesWorkspaces": "mlw-",
      "managedIdentityUserAssignedIdentities": "id-",
      "managementManagementGroups": "mg-",
      "migrateAssessmentProjects": "migr-",
      "networkApplicationGateways": "agw-",
      "networkApplicationSecurityGroups": "asg-",
      "networkAzureFirewalls": "afw-",
      "networkBastionHosts": "bas-",
      "networkConnections": "con-",
      "networkDnsZones": "dnsz-",
      "networkExpressRouteCircuits": "erc-",
      "networkFirewallPolicies": "afwp-",
      "networkFirewallPoliciesWebApplication": "waf",
      "networkFirewallPoliciesRuleGroups": "wafrg",
      "networkFrontDoors": "fd-",
      "networkFrontdoorWebApplicationFirewallPolicies": "fdfp-",
      "networkLoadBalancersExternal": "lbe-",
      "networkLoadBalancersInternal": "lbi-",
      "networkLoadBalancersInboundNatRules": "rule-",
      "networkLocalNetworkGateways": "lgw-",
      "networkNatGateways": "ng-",
      "networkNetworkInterfaces": "nic-",
      "networkNetworkSecurityGroups": "nsg-",
      "networkNetworkSecurityGroupsSecurityRules": "nsgsr-",
      "networkNetworkWatchers": "nw-",
      "networkPrivateDnsZones": "pdnsz-",
      "networkPrivateLinkServices": "pl-",
      "networkPublicIPAddresses": "pip-",
      "networkPublicIPPrefixes": "ippre-",
      "networkRouteFilters": "rf-",
      "networkRouteTables": "rt-",
      "networkRouteTablesRoutes": "udr-",
      "networkTrafficManagerProfiles": "traf-",
      "networkVirtualNetworkGateways": "vgw-",
      "networkVirtualNetworks": "vnet-",
      "networkVirtualNetworksSubnets": "snet-",
      "networkVirtualNetworksVirtualNetworkPeerings": "peer-",
      "networkVirtualWans": "vwan-",
      "networkVpnGateways": "vpng-",
      "networkVpnGatewaysVpnConnections": "vcn-",
      "networkVpnGatewaysVpnSites": "vst-",
      "notificationHubsNamespaces": "ntfns-",
      "notificationHubsNamespacesNotificationHubs": "ntf-",
      "operationalInsightsWorkspaces": "log-",
      "portalDashboards": "dash-",
      "powerBIDedicatedCapacities": "pbi-",
      "purviewAccounts": "pview-",
      "recoveryServicesVaults": "rsv-",
      "resourcesResourceGroups": "rg-",
      "searchSearchServices": "srch-",
      "serviceBusNamespaces": "sb-",
      "serviceBusNamespacesQueues": "sbq-",
      "serviceBusNamespacesTopics": "sbt-",
      "serviceEndPointPolicies": "se-",
      "serviceFabricClusters": "sf-",
      "signalRServiceSignalR": "sigr",
      "sqlManagedInstances": "sqlmi-",
      "sqlServers": "sql-",
      "sqlServersDataWarehouse": "sqldw-",
      "sqlServersDatabases": "sqldb-",
      "sqlServersDatabasesStretch": "sqlstrdb-",
      "storageStorageAccounts": "st",
      "storageStorageAccountsVm": "stvm",
      "storSimpleManagers": "ssimp",
      "streamAnalyticsCluster": "asa-",
      "synapseWorkspaces": "syn",
      "synapseWorkspacesAnalyticsWorkspaces": "synw",
      "synapseWorkspacesSqlPoolsDedicated": "syndp",
      "synapseWorkspacesSqlPoolsSpark": "synsp",
      "timeSeriesInsightsEnvironments": "tsi-",
      "webServerFarms": "plan-",
      "webSitesAppService": "app-",
      "webSitesAppServiceEnvironment": "ase-",
      "webSitesFunctions": "func-",
      "webStaticSites": "stapp-"
    },
    "abbrs": "[variables('$fxv#0')]",
    "resourceToken": "[toLower(uniqueString(subscription().id, parameters('environmentName'), parameters('location')))]",
    "tags": {
      "azd-env-name": "[parameters('environmentName')]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "web",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": "[if(not(empty(parameters('webServiceName'))), createObject('value', parameters('webServiceName')), createObject('value', format('{0}web-{1}', variables('abbrs').webSitesAppService, variables('resourceToken'))))]",
          "location": {
            "value": "[parameters('location')]"
          },
          "appServicePlanId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'appserviceplan'), '2022-09-01').outputs.id.value]"
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'keyvault'), '2022-09-01').outputs.name.value]"
          },
          "runtimeName": {
            "value": "dotnetcore"
          },
          "runtimeVersion": {
            "value": "8.0"
          },
          "tags": {
            "value": "[union(variables('tags'), createObject('azd-service-name', 'web'))]"
          },
          "appSettings": {
            "value": {
              "AZURE_SQL_CATALOG_CONNECTION_STRING_KEY": "AZURE-SQL-CATALOG-CONNECTION-STRING",
              "AZURE_SQL_IDENTITY_CONNECTION_STRING_KEY": "AZURE-SQL-IDENTITY-CONNECTION-STRING",
              "AZURE_KEY_VAULT_ENDPOINT": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'keyvault'), '2022-09-01').outputs.endpoint.value]"
            }
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "11613001398101242960"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "applicationInsightsName": {
              "type": "string",
              "defaultValue": ""
            },
            "appServicePlanId": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string",
              "defaultValue": ""
            },
            "managedIdentity": {
              "type": "bool",
              "defaultValue": "[not(empty(parameters('keyVaultName')))]"
            },
            "runtimeName": {
              "type": "string",
              "allowedValues": [
                "dotnet",
                "dotnetcore",
                "dotnet-isolated",
                "node",
                "python",
                "java",
                "powershell",
                "custom"
              ]
            },
            "runtimeNameAndVersion": {
              "type": "string",
              "defaultValue": "[format('{0}|{1}', parameters('runtimeName'), parameters('runtimeVersion'))]"
            },
            "runtimeVersion": {
              "type": "string"
            },
            "kind": {
              "type": "string",
              "defaultValue": "app,linux"
            },
            "allowedOrigins": {
              "type": "array",
              "defaultValue": []
            },
            "alwaysOn": {
              "type": "bool",
              "defaultValue": true
            },
            "appCommandLine": {
              "type": "string",
              "defaultValue": ""
            },
            "appSettings": {
              "type": "object",
              "defaultValue": {}
            },
            "clientAffinityEnabled": {
              "type": "bool",
              "defaultValue": false
            },
            "enableOryxBuild": {
              "type": "bool",
              "defaultValue": "[contains(parameters('kind'), 'linux')]"
            },
            "functionAppScaleLimit": {
              "type": "int",
              "defaultValue": -1
            },
            "linuxFxVersion": {
              "type": "string",
              "defaultValue": "[parameters('runtimeNameAndVersion')]"
            },
            "minimumElasticInstanceCount": {
              "type": "int",
              "defaultValue": -1
            },
            "numberOfWorkers": {
              "type": "int",
              "defaultValue": -1
            },
            "scmDoBuildDuringDeployment": {
              "type": "bool",
              "defaultValue": false
            },
            "use32BitWorkerProcess": {
              "type": "bool",
              "defaultValue": false
            },
            "ftpsState": {
              "type": "string",
              "defaultValue": "FtpsOnly"
            },
            "healthCheckPath": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites/config",
              "apiVersion": "2022-03-01",
              "name": "[format('{0}/{1}', parameters('name'), 'appsettings')]",
              "properties": "[union(parameters('appSettings'), createObject('SCM_DO_BUILD_DURING_DEPLOYMENT', string(parameters('scmDoBuildDuringDeployment')), 'ENABLE_ORYX_BUILD', string(parameters('enableOryxBuild'))), if(not(empty(parameters('applicationInsightsName'))), createObject('APPLICATIONINSIGHTS_CONNECTION_STRING', reference(resourceId('Microsoft.Insights/components', parameters('applicationInsightsName')), '2020-02-02').ConnectionString), createObject()), if(not(empty(parameters('keyVaultName'))), createObject('AZURE_KEY_VAULT_ENDPOINT', reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), '2022-07-01').vaultUri), createObject()))]",
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Web/sites/config",
              "apiVersion": "2022-03-01",
              "name": "[format('{0}/{1}', parameters('name'), 'logs')]",
              "properties": {
                "applicationLogs": {
                  "fileSystem": {
                    "level": "Verbose"
                  }
                },
                "detailedErrorMessages": {
                  "enabled": true
                },
                "failedRequestsTracing": {
                  "enabled": true
                },
                "httpLogs": {
                  "fileSystem": {
                    "enabled": true,
                    "retentionInDays": 1,
                    "retentionInMb": 35
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('name'))]",
                "[resourceId('Microsoft.Web/sites/config', parameters('name'), 'appsettings')]"
              ]
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2022-03-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "[parameters('kind')]",
              "properties": {
                "serverFarmId": "[parameters('appServicePlanId')]",
                "siteConfig": {
                  "linuxFxVersion": "[parameters('linuxFxVersion')]",
                  "alwaysOn": "[parameters('alwaysOn')]",
                  "ftpsState": "[parameters('ftpsState')]",
                  "minTlsVersion": "1.2",
                  "appCommandLine": "[parameters('appCommandLine')]",
                  "numberOfWorkers": "[if(not(equals(parameters('numberOfWorkers'), -1)), parameters('numberOfWorkers'), null())]",
                  "minimumElasticInstanceCount": "[if(not(equals(parameters('minimumElasticInstanceCount'), -1)), parameters('minimumElasticInstanceCount'), null())]",
                  "use32BitWorkerProcess": "[parameters('use32BitWorkerProcess')]",
                  "functionAppScaleLimit": "[if(not(equals(parameters('functionAppScaleLimit'), -1)), parameters('functionAppScaleLimit'), null())]",
                  "healthCheckPath": "[parameters('healthCheckPath')]",
                  "cors": {
                    "allowedOrigins": "[union(createArray('https://portal.azure.com', 'https://ms.portal.azure.com'), parameters('allowedOrigins'))]"
                  }
                },
                "clientAffinityEnabled": "[parameters('clientAffinityEnabled')]",
                "httpsOnly": true
              },
              "identity": {
                "type": "[if(parameters('managedIdentity'), 'SystemAssigned', 'None')]"
              }
            }
          ],
          "outputs": {
            "identityPrincipalId": {
              "type": "string",
              "value": "[if(parameters('managedIdentity'), reference(resourceId('Microsoft.Web/sites', parameters('name')), '2022-03-01', 'full').identity.principalId, '')]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "uri": {
              "type": "string",
              "value": "[format('https://{0}', reference(resourceId('Microsoft.Web/sites', parameters('name')), '2022-03-01').defaultHostName)]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'appserviceplan')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'keyvault')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "api-keyvault-access",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'keyvault'), '2022-09-01').outputs.name.value]"
          },
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'web'), '2022-09-01').outputs.identityPrincipalId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "5196715201020723622"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "defaultValue": "add"
            },
            "keyVaultName": {
              "type": "string"
            },
            "permissions": {
              "type": "object",
              "defaultValue": {
                "secrets": [
                  "get",
                  "list"
                ]
              }
            },
            "principalId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults/accessPolicies",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
              "properties": {
                "accessPolicies": [
                  {
                    "objectId": "[parameters('principalId')]",
                    "tenantId": "[subscription().tenantId]",
                    "permissions": "[parameters('permissions')]"
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'keyvault')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'web')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "sql-catalog",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": "[if(not(empty(parameters('catalogDatabaseServerName'))), createObject('value', parameters('catalogDatabaseServerName')), createObject('value', format('{0}catalog-{1}', variables('abbrs').sqlServers, variables('resourceToken'))))]",
          "databaseName": {
            "value": "[parameters('catalogDatabaseName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "sqlAdminPassword": {
            "value": "[parameters('sqlAdminPassword')]"
          },
          "appUserPassword": {
            "value": "[parameters('appUserPassword')]"
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'keyvault'), '2022-09-01').outputs.name.value]"
          },
          "connectionStringKey": {
            "value": "AZURE-SQL-CATALOG-CONNECTION-STRING"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "17730557108796395770"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "appUser": {
              "type": "string",
              "defaultValue": "appUser"
            },
            "databaseName": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string"
            },
            "sqlAdmin": {
              "type": "string",
              "defaultValue": "sqlAdmin"
            },
            "connectionStringKey": {
              "type": "string",
              "defaultValue": "AZURE-SQL-CONNECTION-STRING"
            },
            "sqlAdminPassword": {
              "type": "securestring"
            },
            "appUserPassword": {
              "type": "securestring"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Sql/servers/databases",
              "apiVersion": "2022-05-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), parameters('databaseName'))]",
              "location": "[parameters('location')]",
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Sql/servers/firewallRules",
              "apiVersion": "2022-05-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), 'Azure Services')]",
              "properties": {
                "startIpAddress": "0.0.0.1",
                "endIpAddress": "255.255.255.254"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Sql/servers",
              "apiVersion": "2022-05-01-preview",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "version": "12.0",
                "minimalTlsVersion": "1.2",
                "publicNetworkAccess": "Enabled",
                "administratorLogin": "[parameters('sqlAdmin')]",
                "administratorLoginPassword": "[parameters('sqlAdminPassword')]"
              }
            },
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-deployment-script', parameters('name'))]",
              "location": "[parameters('location')]",
              "kind": "AzureCLI",
              "properties": {
                "azCliVersion": "2.37.0",
                "retentionInterval": "PT1H",
                "timeout": "PT5M",
                "cleanupPreference": "OnSuccess",
                "environmentVariables": [
                  {
                    "name": "APPUSERNAME",
                    "value": "[parameters('appUser')]"
                  },
                  {
                    "name": "APPUSERPASSWORD",
                    "secureValue": "[parameters('appUserPassword')]"
                  },
                  {
                    "name": "DBNAME",
                    "value": "[parameters('databaseName')]"
                  },
                  {
                    "name": "DBSERVER",
                    "value": "[reference(resourceId('Microsoft.Sql/servers', parameters('name')), '2022-05-01-preview').fullyQualifiedDomainName]"
                  },
                  {
                    "name": "SQLCMDPASSWORD",
                    "secureValue": "[parameters('sqlAdminPassword')]"
                  },
                  {
                    "name": "SQLADMIN",
                    "value": "[parameters('sqlAdmin')]"
                  }
                ],
                "scriptContent": "wget https://github.com/microsoft/go-sqlcmd/releases/download/v0.8.1/sqlcmd-v0.8.1-linux-x64.tar.bz2\ntar x -f sqlcmd-v0.8.1-linux-x64.tar.bz2 -C .\n\ncat <<SCRIPT_END > ./initDb.sql\ndrop user ${APPUSERNAME}\ngo\ncreate user ${APPUSERNAME} with password = '${APPUSERPASSWORD}'\ngo\nalter role db_owner add member ${APPUSERNAME}\ngo\nSCRIPT_END\n\n./sqlcmd -S ${DBSERVER} -d ${DBNAME} -U ${SQLADMIN} -i ./initDb.sql\n    "
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'sqlAdminPassword')]",
              "properties": {
                "value": "[parameters('sqlAdminPassword')]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'appUserPassword')]",
              "properties": {
                "value": "[parameters('appUserPassword')]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('connectionStringKey'))]",
              "properties": {
                "value": "[format('{0}; Password={1}', format('Server={0}; Database={1}; User={2}', reference(resourceId('Microsoft.Sql/servers', parameters('name')), '2022-05-01-preview').fullyQualifiedDomainName, parameters('databaseName'), parameters('appUser')), parameters('appUserPassword'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', parameters('name'), parameters('databaseName'))]",
                "[resourceId('Microsoft.Sql/servers', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "connectionStringKey": {
              "type": "string",
              "value": "[parameters('connectionStringKey')]"
            },
            "databaseName": {
              "type": "string",
              "value": "[parameters('databaseName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'keyvault')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "sql-identity",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": "[if(not(empty(parameters('identityDatabaseServerName'))), createObject('value', parameters('identityDatabaseServerName')), createObject('value', format('{0}identity-{1}', variables('abbrs').sqlServers, variables('resourceToken'))))]",
          "databaseName": {
            "value": "[parameters('identityDatabaseName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "sqlAdminPassword": {
            "value": "[parameters('sqlAdminPassword')]"
          },
          "appUserPassword": {
            "value": "[parameters('appUserPassword')]"
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'keyvault'), '2022-09-01').outputs.name.value]"
          },
          "connectionStringKey": {
            "value": "AZURE-SQL-IDENTITY-CONNECTION-STRING"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "17730557108796395770"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "appUser": {
              "type": "string",
              "defaultValue": "appUser"
            },
            "databaseName": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string"
            },
            "sqlAdmin": {
              "type": "string",
              "defaultValue": "sqlAdmin"
            },
            "connectionStringKey": {
              "type": "string",
              "defaultValue": "AZURE-SQL-CONNECTION-STRING"
            },
            "sqlAdminPassword": {
              "type": "securestring"
            },
            "appUserPassword": {
              "type": "securestring"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Sql/servers/databases",
              "apiVersion": "2022-05-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), parameters('databaseName'))]",
              "location": "[parameters('location')]",
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Sql/servers/firewallRules",
              "apiVersion": "2022-05-01-preview",
              "name": "[format('{0}/{1}', parameters('name'), 'Azure Services')]",
              "properties": {
                "startIpAddress": "0.0.0.1",
                "endIpAddress": "255.255.255.254"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Sql/servers",
              "apiVersion": "2022-05-01-preview",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "version": "12.0",
                "minimalTlsVersion": "1.2",
                "publicNetworkAccess": "Enabled",
                "administratorLogin": "[parameters('sqlAdmin')]",
                "administratorLoginPassword": "[parameters('sqlAdminPassword')]"
              }
            },
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-deployment-script', parameters('name'))]",
              "location": "[parameters('location')]",
              "kind": "AzureCLI",
              "properties": {
                "azCliVersion": "2.37.0",
                "retentionInterval": "PT1H",
                "timeout": "PT5M",
                "cleanupPreference": "OnSuccess",
                "environmentVariables": [
                  {
                    "name": "APPUSERNAME",
                    "value": "[parameters('appUser')]"
                  },
                  {
                    "name": "APPUSERPASSWORD",
                    "secureValue": "[parameters('appUserPassword')]"
                  },
                  {
                    "name": "DBNAME",
                    "value": "[parameters('databaseName')]"
                  },
                  {
                    "name": "DBSERVER",
                    "value": "[reference(resourceId('Microsoft.Sql/servers', parameters('name')), '2022-05-01-preview').fullyQualifiedDomainName]"
                  },
                  {
                    "name": "SQLCMDPASSWORD",
                    "secureValue": "[parameters('sqlAdminPassword')]"
                  },
                  {
                    "name": "SQLADMIN",
                    "value": "[parameters('sqlAdmin')]"
                  }
                ],
                "scriptContent": "wget https://github.com/microsoft/go-sqlcmd/releases/download/v0.8.1/sqlcmd-v0.8.1-linux-x64.tar.bz2\ntar x -f sqlcmd-v0.8.1-linux-x64.tar.bz2 -C .\n\ncat <<SCRIPT_END > ./initDb.sql\ndrop user ${APPUSERNAME}\ngo\ncreate user ${APPUSERNAME} with password = '${APPUSERPASSWORD}'\ngo\nalter role db_owner add member ${APPUSERNAME}\ngo\nSCRIPT_END\n\n./sqlcmd -S ${DBSERVER} -d ${DBNAME} -U ${SQLADMIN} -i ./initDb.sql\n    "
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'sqlAdminPassword')]",
              "properties": {
                "value": "[parameters('sqlAdminPassword')]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'appUserPassword')]",
              "properties": {
                "value": "[parameters('appUserPassword')]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('connectionStringKey'))]",
              "properties": {
                "value": "[format('{0}; Password={1}', format('Server={0}; Database={1}; User={2}', reference(resourceId('Microsoft.Sql/servers', parameters('name')), '2022-05-01-preview').fullyQualifiedDomainName, parameters('databaseName'), parameters('appUser')), parameters('appUserPassword'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', parameters('name'), parameters('databaseName'))]",
                "[resourceId('Microsoft.Sql/servers', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "connectionStringKey": {
              "type": "string",
              "value": "[parameters('connectionStringKey')]"
            },
            "databaseName": {
              "type": "string",
              "value": "[parameters('databaseName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'keyvault')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "keyvault",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": "[if(not(empty(parameters('keyVaultName'))), createObject('value', parameters('keyVaultName')), createObject('value', format('{0}{1}', variables('abbrs').keyVaultVaults, variables('resourceToken'))))]",
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "principalId": {
            "value": "[parameters('principalId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "12217467359298791896"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "principalId": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2022-07-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "tenantId": "[subscription().tenantId]",
                "sku": {
                  "family": "A",
                  "name": "standard"
                },
                "accessPolicies": "[if(not(empty(parameters('principalId'))), createArray(createObject('objectId', parameters('principalId'), 'permissions', createObject('secrets', createArray('get', 'list')), 'tenantId', subscription().tenantId)), createArray())]"
              }
            }
          ],
          "outputs": {
            "endpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '2022-07-01').vaultUri]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "appserviceplan",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": "[if(not(empty(parameters('appServicePlanName'))), createObject('value', parameters('appServicePlanName')), createObject('value', format('{0}{1}', variables('abbrs').webServerFarms, variables('resourceToken'))))]",
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "sku": {
            "value": {
              "name": "B1"
            }
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "10634827942855542464"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "kind": {
              "type": "string",
              "defaultValue": ""
            },
            "reserved": {
              "type": "bool",
              "defaultValue": true
            },
            "sku": {
              "type": "object"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2022-03-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": "[parameters('sku')]",
              "kind": "[parameters('kind')]",
              "properties": {
                "reserved": "[parameters('reserved')]"
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/serverfarms', parameters('name'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
      ]
    }
  ],
  "outputs": {
    "AZURE_SQL_CATALOG_CONNECTION_STRING_KEY": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'sql-catalog'), '2022-09-01').outputs.connectionStringKey.value]"
    },
    "AZURE_SQL_IDENTITY_CONNECTION_STRING_KEY": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'sql-identity'), '2022-09-01').outputs.connectionStringKey.value]"
    },
    "AZURE_SQL_CATALOG_DATABASE_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'sql-catalog'), '2022-09-01').outputs.databaseName.value]"
    },
    "AZURE_SQL_IDENTITY_DATABASE_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'sql-identity'), '2022-09-01').outputs.databaseName.value]"
    },
    "AZURE_LOCATION": {
      "type": "string",
      "value": "[parameters('location')]"
    },
    "AZURE_TENANT_ID": {
      "type": "string",
      "value": "[tenant().tenantId]"
    },
    "AZURE_KEY_VAULT_ENDPOINT": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'keyvault'), '2022-09-01').outputs.endpoint.value]"
    },
    "AZURE_KEY_VAULT_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'keyvault'), '2022-09-01').outputs.name.value]"
    }
  }
}